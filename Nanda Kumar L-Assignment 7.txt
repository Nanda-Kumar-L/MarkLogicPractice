xquery version "1.0-ml";

declare function local:json-to-cts($jsonString as xs:string) as xs:string {
  let $json := xdmp:from-json-string($jsonString)
  let $condition := map:get($json, "condition")
  let $rules := map:get($json, "rules")
  return 
    if ($condition eq "and") then
      fn:concat("cts:and-query((",
        fn:string-join(
          for $rule at $x in json:array-values($rules)
          return
            if (map:contains($rule, "condition")) then
              local:json-to-cts(xdmp:to-json-string($rule))
            else
              fn:concat("cts:path-range-query(/", xs:string(map:get($rule, "field")), ',"', xs:string(map:get($rule, "operator")), '","', xs:string(map:get($rule, "value")), '")')
          , ", "), "))")
    else if ($condition eq "or") then
      fn:concat("cts:or-query((",
        fn:string-join(
          for $rule at $x in json:array-values($rules)
          return
            if (map:contains($rule, "condition")) then
              local:json-to-cts(xdmp:to-json-string($rule))
            else
              fn:concat("cts:path-range-query(/", xs:string(map:get($rule, "field")), ',"', xs:string(map:get($rule, "operator")), '","', xs:string(map:get($rule, "value")), '")')
          , ", "), "))")
    else ""
};


let $JSON := '{
  "condition": "and",
  "rules": [
    {"field": "C1", "operator": "=", "value": "some_value"},
    {"field": "C2", "operator": ">=", "value": "some_value"},
    {
      "condition": "or",
      "rules": [
        {
          "condition": "and",
          "rules": [
            {"field": "C3", "operator": ">", "value": 10},
            {"field": "C6", "operator": "<", "value": 20}
          ]
        },
        {
          "condition": "or",
          "rules": [
            {"field": "C4", "operator": "<=", "value": 50},
            {"field": "C5", "operator": "!=", "value": "exclude_value"}
          ]
        }
      ]
    }
  ]
}'

let $cts-query := local:json-to-cts($JSON)
return
  $cts-query




OUTPUT:
cts:and-query((cts:path-range-query(/C1,"=","some_value"), cts:path-range-query(/C2,">=","some_value"), cts:or-query((cts:and-query((cts:path-range-query(/C3,">","10"), cts:path-range-query(/C6,"<","20"))), cts:or-query((cts:path-range-query(/C4,"<=","50"), cts:path-range-query(/C5,"!=","exclude_value")))))))