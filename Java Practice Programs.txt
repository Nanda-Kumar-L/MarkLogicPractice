1.Threads

class MyThread extends Thread {
    @Override
    public void run() {
        for (int i = 1; i <= 5; i++) {
            System.out.println(Thread.currentThread().getName() + " - " + i);
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

public class Threads1 {
    public static void main(String[] args) {
        MyThread thread1 = new MyThread();
        MyThread thread2 = new MyThread();

        thread1.start();
        thread2.start();
    }
}


2.TreeMap

import java.util.TreeMap;

public class TreeMap1 {
    public static void main(String[] args) {
        TreeMap<Integer, String> treeMap = new TreeMap<>();

        treeMap.put(5, "Five");
        treeMap.put(1, "One");
        treeMap.put(10, "Ten");
        treeMap.put(3, "Three");
        treeMap.put(7, "Seven");

        System.out.println("TreeMap: " + treeMap);

        System.out.println("Value for key 3: " + treeMap.get(3));

        treeMap.remove(10);
        
        System.out.println("TreeMap after removal: " + treeMap);
    }
}


3.ConcurrentHashMap


import java.util.concurrent.ConcurrentHashMap;

public class concurrentHashMap {
    public static void main(String[] args) {
        ConcurrentHashMap<Integer, String> map = new ConcurrentHashMap<>();

        Thread t1 = new Thread(() -> {
            for (int i = 0; i < 10; i++) {
                map.put(i, "Value" + i);
            }
        });

        Thread t2 = new Thread(() -> {
            for (int i = 10; i < 20; i++) {
                map.put(i, "Value" + i);
            }
        });

        t1.start();
        t2.start();

        try {
            t1.join();
            t2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        map.forEach((key, value) -> System.out.println(key + " : " + value));
    }
}


4.CopyOnWriteArrayList

import java.util.concurrent.CopyOnWriteArrayList;

public class copyOnWriteArrayList {
    public static void main(String[] args) {
        CopyOnWriteArrayList<String> list = new CopyOnWriteArrayList<>();

        list.add("A");
        list.add("B");
        list.add("C");

        Thread writer = new Thread(() -> {
            list.add("D");
            list.remove("A");
            list.add("E");
        });

        Thread reader = new Thread(() -> {
            for (String item : list) {
                System.out.println(item);
            }
        });

        writer.start();
        reader.start();

        try {
            writer.join();
            reader.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Final list: " + list);
    }
}





5.CopyOnWriteArraySet

package CollectionPractice;

import java.util.concurrent.CopyOnWriteArraySet;

public class copyOnWriteArraySet {
    public static void main(String[] args) {
        CopyOnWriteArraySet<String> set = new CopyOnWriteArraySet<>();

        set.add("A");
        set.add("B");
        set.add("C");

        Thread writer = new Thread(() -> {
            set.add("D");
            set.remove("A");
            set.add("C");
        });

        Thread reader = new Thread(() -> {
            for (String item : set) {
                System.out.println(item);
            }
        });

        writer.start();
        reader.start();

        try {
            writer.join();
            reader.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Final set: " + set);
    }
}
