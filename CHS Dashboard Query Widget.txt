0) Total available appointment slots for loading    - X day(user to select)

declare variable $days as xs:integer external;

let $current-date := current-dateTime()
let $end-date := $current-date + xs:dayTimeDuration(concat('P', xs:int($days), 'D'))

let $appointments :=
  for $appointment in collection("Appointment")/Appointments/Appointment
  where $appointment/AppointmentType = "Load" 
        and xs:dateTime($appointment/ScheduledStartDateTime) >= $current-date
        and xs:dateTime($appointment/ScheduledEndDateTime) <= $end-date
  return $appointment

let $total-appointments := count($appointments)

return
  element result {
    element totalAppointments { $total-appointments },
    for $appointment in $appointments
    return element appointment {
      element AppointmentId { $appointment/AppointmentId/text() },
      element ScheduledStartDateTime { $appointment/ScheduledStartDateTime },
      element ScheduledEndDateTime { $appointment/ScheduledEndDateTime }
    }
  }











1) Loading Appointment attached to 'A' Vessel - Group by Vessel Line Up

let $Appointments := collection('Appointment')
let $vessels := collection('Vessel Line Up Inventory')

return element result{
for $lineup in fn:distinct-values($vessels//LineUpId)
let $vessel := $vessels[.//LineUpId eq $lineup]
let $appointment := $Appointments[.//AppointmentId eq $vessel//LoadingAppointmentId]
let $appointmentId := $appointment//AppointmentId
let $ScheduledStartDateTime := $appointment//ScheduledStartDateTime
let $ScheduleEndDateTime := $appointment//ScheduledEndDateTime
return (element Lineup{$lineup},
    element Appointment{$appointmentId,$ScheduledStartDateTime,$ScheduleEndDateTime})
}
















2) Appointment attached to  Vessel / Vessel Line up but late for appointment  

let $currentDate := fn:current-dateTime()

let $Appointments := collection('Appointment')
let $Vessels := collection('Vessel Lineup Inventory')
let $lateAppointments :=
  for $vessel in $Vessels
  let $vesselId := $vessel//VesselId
  let $lineUpId := $vessel//LineUpId
  return 
  element vessel
  {
    $vesselId,$lineUpId,
    for $appointment in $Appointments
      let $appointmentId := $appointment//AppointmentId
      let $scheduledStartDateTime := $appointment//ScheduledStartDateTime
      let $scheduledEndDateTime := $appointment//ScheduledEndDateTime
      where $appointment//AppointmentType = "Load" and $appointment//AppointmentId = $vessel//AppointmentId
            and xs:dateTime($appointment//actualCheckInDateTime) > $currentDate
      return
        element Appointment { $appointmentId,$scheduledStartDateTime,$scheduledEndDateTime }
  }
return element result { $lateAppointments }

















3) Shipments that are impacted by weather disruptions 

let $impactedShipments :=
  for $shipment in fn:collection("Shipments and Inventory")
  let $routeId := $shipment//RouteId
  let $inventoryId := $shipment//InventoryId
  let $inventoryType := $shipment//InventoryType
  let $weatherDisruption := fn:collection("Weather Disruption")//Disruption[Zip eq $routeId]
  let $riverDisruption := fn:collection("River Disruption")//Disruption[RiverLocation eq $routeId]
  where exists($weatherDisruption) or exists($riverDisruption)
  return
    if ((exists($weatherDisruption) and $weatherDisruption/DisruptionStatus != "Normal") or
       (exists($riverDisruption) and $riverDisruption/DisruptionStatus != "Normal"))
    then
      element Shipment { $inventoryId, $inventoryType, $routeId,
        element WeatherDisruptionStatus { $weatherDisruption/DisruptionStatus },
        element RiverDisruptionStatus { $riverDisruption/DisruptionStatus }
      }
    else ()

let $Confirmed :=
  
    for $impactedShipment in $impactedShipments
    let $inventoryId := $impactedShipment/InventoryId
    let $AppointmentIds := 
      for $i in $impactedShipment//AppointmentId
      where $i/../AppointmentStatus eq 'Confirmed'
      return $i
    where count($AppointmentIds) eq 1
    return element appointment{$inventoryId,$AppointmentIds}
    

return
  element Result {
    element ImpactedShipments { $impactedShipments },
    element CancelledCount { count($Confirmed) },
    element ConfirmedAppointments {$Confirmed} 
  }















4) Total Appointments rescheduled more than once 

let $rescheduledAppointments :=
  for $appointment in fn:collection("Appointment")
  let $inventoryId := collection("Shipments and Inventory")[.//AppointmentId eq $appointment//AppointmentId]/InventoryId/text()
  let $appointmentId := $appointment/AppointmentId/text()
  let $status := $appointment/AppointmentStatus/text()
  where $status = "Cancelled"
  return
    if (count($appointment[InventoryId eq $inventoryId and AppointmentStatus eq "Confirmed"]) > 1)
    then
      element Appointment {
        element InventoryId { $inventoryId },
        element AppointmentId { $appointmentId },
        element RescheduleCount { count($appointment[InventoryId eq $inventoryId and AppointmentStatus eq "Confirmed"]) - 1}
      }
    else ()

return
  element Result {
    element RescheduledAppointments { $rescheduledAppointments }
  }

















5) Appointment not loaded before Xhrs of vessel departure time:
4hrs before appt
3hrs before appt
2hrs before appt
1hr  before appt

let $appointments :=
  for $appointment in collection("Appointment")
  let $vesselId := $appointment/VesselId
  let $vesselName := $appointment/VesselName
  let $inventoryId := $appointment/InventoryId
  let $scheduleStartDate := $appointment/ScheduleStartDate
  let $scheduleEndDate := $appointment/ScheduleEndDate
  let $appointmentId := $appointment/AppointmentId
  let $appointmentType := $appointment/AppointmentType
  let $appointmentStatus := $appointment/AppointmentStatus
  let $vesselJourney := collection("Vessel Journey")//Vessel[Id eq $vesselId]
  let $ExpectedVesselOriginDepartureDateTime := $vesselJourney/ExpectedVesselOriginDepartureDateTime
  where $appointmentType eq "Load" and $appointmentStatus eq "Confirmed"
  return
    if (fn:exists($vesselJourney) and $ExpectedVesselOriginDepartureDateTime gt $scheduleStartDate)
    then
      element Appointment { $appointmentId, $inventoryId, $scheduleStartDate, $scheduleEndDate, $vesselId, $vesselName, $ExpectedVesselOriginDepartureDateTime }
    else ()

let $appointments4HrsBefore := $appointments[xs:dateTime(ExpectedVesselOriginDepartureDateTime) le xs:dateTime(ScheduleStartDateTime) - xs:dayTimeDuration('PT4H')]
let $appointments3HrsBefore := $appointments[xs:dateTime(ExpectedVesselOriginDepartureDateTime) le xs:dateTime(ScheduleStartDateTime) - xs:dayTimeDuration('PT3H')]
let $appointments2HrsBefore := $appointments[xs:dateTime(ExpectedVesselOriginDepartureDateTime) le xs:dateTime(ScheduleStartDateTime) - xs:dayTimeDuration('PT2H')]
let $appointments1HrBefore := $appointments[xs:dateTime(ExpectedVesselOriginDepartureDateTime) le xs:dateTime(ScheduleStartDateTime) - xs:dayTimeDuration('PT1H')]

return
  element Result {
    element Appointments4HrsBefore { $appointments4HrsBefore },
    element Appointments3HrsBefore { $appointments3HrsBefore },
    element Appointments2HrsBefore { $appointments2HrsBefore },
    element Appointments1HrBefore { $appointments1HrBefore }
  }













6)Total Barges/Trucks/Rail Arrrived but not checked in more than Xhrs

declare function local:waiting-hours($arrival as xs:dateTime){
  let $currentDateTime := fn:current-dateTime()
  return fn:days-from-duration(xs:duration($arrival - $currentDateTime)) * 24
};


let $results :=
  for $shipment in fn:collection("ShipmentsAndInventory")
  let $inventoryId := $shipment//InventoryId
  let $inventoryType := $shipment//InventoryType
  let $appointments :=
    for $appointment in fn:collection("Appointment")
    let $arrivalDateTime := xs:dateTime($appointment//ActualShipmentDestinationArrivalDateTime)
    let $waitingHours := local:waiting-hours($arrivalDateTime)
    where $appointment//InventoryId eq $inventoryId and $appointment//AppointmentStatus eq "Confirmed"
    return (
      element appointment {
        element ActualShipmentDestinationArrivalDateTime { $arrivalDateTime },
        element WaitingHours { $waitingHours }
        }
      )
  where fn:exists($appointments) and $shipment//ShipmentStatus eq "Arrived"
  return
    element shipment {
      element InventoryId { $inventoryId },
      element InventoryType { $inventoryType },
      $appointments
    }


let $groupedResults :=
  for $type in fn:distinct-values($results//InventoryType)
  let $filteredResults := $results[.//InventoryType eq $type]
  let $count := fn:count($filteredResults)
  return
    element object {
      element InventoryType { $type },
      element CountOfInventoryId { $count },
      element Details { $filteredResults }
    }

return element Result { $groupedResults }




















7)Total Barges/Trucks/Rail partially unloaded with idle time(waiting time since the arrival)

declare function local:idle-time($checkedIn as xs:dateTime){
  let $currentDateTime := fn:current-dateTime()
  return fn:days-from-duration(xs:duration($checkedIn - $currentDateTime))
};


let $results :=
  for $shipment in fn:collection("ShipmentsAndInventory")
  let $inventoryId := $shipment//InventoryId
  let $inventoryType := $shipment//InventoryType
  let $arrivalDateTime := $shipment//ActualShipmentDestinationArrivalDateTime
  let $shipmentStatus := $shipment//ShipmentStatus
  let $checkedInDateTime := $shipment//CheckedInDateTime
  let $idleTime := local:idle-time($checkedInDateTime)
  
  where $shipment//ShipmentStatus eq "Partially Unloaded"
  return
    element object {
      $inventoryId,
      $inventoryType,
      $arrivalDateTime,
      $shipmentStatus,
      element IdleTimeInDays { $idleTime }
    }


let $groupedResults :=
  for $type in fn:distinct-values($results//InventoryType)
  let $filteredResults := $results[.//InventoryType eq $type]
  let $count := fn:count($filteredResults)
  return
    element object {
      element InventoryType { $type },
      element CountOfInventoryId { $count },
      element Details { $filteredResults }
    }
 
return element Result { $groupedResults }


















8)Total Appointments to be loaded for a given vessel line up 

element result{
  for $i in collection("Vessel Lineup Blend")
  let $lineupId := $i//lineupId
  let $appointments := 
    for $appointment in collection("Appointments")
    let $appointmentId := $appointment//AppointmentId
    where $appointment//$lineupId eq $lineupId and $appointment//AppointmentStatus eq 'Confirmed' and $appointment//AppointmentType eq 'Load'
    return element appointment{$appointmentId}
  return element lineupId{$lineupId, element count{count($appointments)}, element object{$appointments}}
}

















9)Potential contract voilation if "Y" appointments are not loaded in Xhrs 

let $currentDateTime := current-dateTime()

let $appointments := for $appointment in collection("Appointment")
    where $appointment//AppointmentStatus eq "Confirmed"
    and $appointment//AppointmentType eq "Load"
    and  xs:dateTime($appointment//ScheduledStartDateTime) > (xs:dateTime($appointment//ScheduledEndDateTime) + xs:dayTimeDuration("PT5H"))
    return $appointment

return element result{ 
for $appointment in $appointments
let $vesselLineupBlend := collection("Vessel LineUp Blend")[.//VesselId eq $appointment//VesselId]
let $vesselJourney := collection("Vessel Journey")[.//VesselId eq $appointment//VesselId]
return
    element object {
        element VesselId { $vesselLineupBlend//VesselId },
        element LineupId { $vesselLineupBlend//LineupId },
        element Appointment {
            element AppointmentId { $appointment//AppointmentId },
            element ScheduledStartDateTime { $appointment//ScheduledStartDateTime },
            element ScheduledEndDateTime { $appointment//ScheduledEndDateTime },
            element NoOfHoursCrossedScheduledEndDateTime {
                hours-from-duration(
                    $currentDateTime - xs:dateTime($appointment//ScheduledEndDateTime)
                )
            }
        }
    }
}














10)Total Appointments for X date

let $currentDate := fn:current-date()

let $results :=
  for $appointment in fn:collection("Appointment")
  let $appointmentType := $appointment//AppointmentType
  let $equipmentType := $appointment//EquipmentType
  let $scheduledStartDate := $appointment//ScheduledStartDate
  where $scheduledStartDate eq $currentDate
  return
    element object {
      $appointmentType,
      $equipmentType,
      $scheduledStartDate
    }
    
let $sumOfAppointments := fn:count($results)
 
let $groupedResults :=

  for $type in fn:distinct-values($results//EquipmentType)
  return
    element object {
      element EquipmentType { $type },
        let $filteredResults := $results[.//EquipmentType eq $type]
        for $i in $filteredResults
        return $i
    }

return element Result { element sumOfAppointments{$sumOfAppointments}, $groupedResults }












11)Total Appointments for X date group by Vessels

let $currentDate := fn:current-date()

let $results :=
  for $appointment in fn:collection("Appointment")
  let $appointmentType := $appointment//AppointmentType
  let $vesselId := $appointment//VesselId
  let $scheduledStartDate := $appointment//ScheduledStartDate
  where $scheduledStartDate eq $currentDate
  return
    element object {
      $appointmentType,
      $vesselId,
      $scheduledStartDate
    }
    
let $sumOfAppointments := fn:count($results)
 
let $groupedResults :=

  for $Id in fn:distinct-values($results//VesselId)
  return
    element object {
      element VesselId { $Id },
        let $filteredResults := $results[.//VesselId eq $Id]
        for $i in $filteredResults
        return $i
    }

return element Result { element sumOfAppointments{$sumOfAppointments}, $groupedResults }














12)Total shipments Unloading in real time

let $currentDate := fn:current-dateTime()

let $appointments := collection("Appointment")[.//AppointmentType eq 'Unload' and ScheduledStartDateTime eq $currentDate]

return
  element result{
  for $shipment in fn:collection("Shipments and Inventory")
  let $id := $shipment//InventoryId
  let $shipments :=
    for $appointment in $appointments
    let $appointmentType := $appointment//AppointmentType
    let $scheduledStartDateTime := $appointment//ScheduledStartDateTime
    where $appointment//InventoryId eq $id
    return element shipment{ $appointmentType,$scheduledStartDateTime,$id }
  return element object{element InventoryId{$id}, element shipments {$shipments} }
}














14)Total available appointment slots for unloading    - X day (user to select)

declare variable $days as xs:integer external;

let $current-date := current-dateTime()
let $end-date := $current-date + xs:dayTimeDuration(concat('P', xs:int($days), 'D'))

let $appointments :=
  for $appointment in collection("Appointment")/Appointments/Appointment
  where $appointment/AppointmentType = "Unload" 
        and xs:dateTime($appointment/ScheduledStartDateTime) >= $current-date
        and xs:dateTime($appointment/ScheduledEndDateTime) <= $end-date
  return $appointment

let $total-appointments := count($appointments)

return
  element result {
    element totalAppointments { $total-appointments },
    for $appointment in $appointments
    return element appointment {
      element AppointmentId { $appointment/AppointmentId/text() },
      element ScheduledStartDateTime { $appointment/ScheduledStartDateTime },
      element ScheduledEndDateTime { $appointment/ScheduledEndDateTime }
    }
  }















15)shipments not matching IB/OB grading 

element result{
  for $vessel in collection("Vessel Lineup Inventory")
  let $id := $vessel//InventoryId
  let $shipments :=
    for $inventory in collection("Shipments and Inventory")
    where $inventory//InventoryId eq $id
    return (element InventoryId{$inventory//InventoryId}, element InventoryType{$inventory//InventoryType})
  where $vessel//LoadGrade ne $vessel//UnloadGrade
  return element shipment {$shipments}
}














16)shipments not meeting contract specs based on latest OB grade results

let $vesselLineup := collection('Vessel Lineup Inv')
let $agriContract := collection('Agri Contract Detail')
let $shipmentsInventory := collection('Shipments and Inventory')

return element result{
for $shipment in $shipmentsInventory
let $inventoryId := $shipment//InventoryId
let $contractId := $shipment//ContractId
let $commodity := $shipment//Commodity
let $loadingGrade := $shipment//LoadingGrade
let $arrivalDateTime := $shipment//ArrivalDateTime

let $vessel := $vesselLineup[$vesselLineup//InventoryId = $inventoryId and $arrivalDateTime < $vesselLineup//VesselDepartureDateTime]

let $contract := $agriContract[$agriContract//ContractId = $contractId and $agriContract//CommodityCode = $commodity and $agriContract//Grade = $loadingGrade]

where not(exists($contract))
return
    element object {
        element InventoryId { $inventoryId },
        element ContractId { $contractId },
        element Commodity { $commodity },
        element LoadingGrade { $loadingGrade }
    }
}













17)commodity - grade - inventory position - status - availability  date  (Current)

let $Date := fn:current-date()

let $Shipments := collection('Shipments and Inventory')[xs:date(xs:dateTime(.//ActualShipmentDestinationArrivalDateTime)) eq $Date]

return element result{
for $status in fn:distinct-values($Shipments//status)
let $shipment := $Shipments[.//status eq $status]
  for $i in $shipment
  let $Commodity := $i//Commodity
  let $Grade     := $i//Grade
  let $date := $i//ActualShipmentDestinationArrivalDateTime
  return (element status {$status},element object{$Commodity, $Grade, $date})
}
























18)commodity - grade - inventory position - status - availability date - (future date) 

let $Date := fn:current-date()

let $Shipments := collection('Shipments and Inventory')[xs:date(xs:dateTime(.//EstimatedShipmentDestinationArrivalDateTime)) > $Date]

return element result{
for $status in fn:distinct-values($Shipments//status)
let $shipment := $Shipments[.//status eq $status]
  for $i in $shipment
  let $Commodity := $i//Commodity
  let $Grade     := $i//Grade
  let $Date := $i//EstimatedShipmentDestinationArrivalDateTime
  return (element status {$status},element shipment{$Commodity, $Grade, $Date})
}
















19)Overall view of Inventories assigned to a Vessel and Vessel Journey

let $Vessels := collection('Vessel Lineup Inventory')
let $Shipments := collection('Shipments and Inventory')
let $Appointments := collection('Appointment')

let $results :=
  for $vessel in $Vessels
  let $vesselId := $vessel//VesselId
  let $journeyId := $vessel//JourneyId
  let $inventoryId := $vessel//InventoryId
  let $inventoryType := $vessel//InventoryType
  let $shipments := $Shipments[.//InventoryId eq $vessel//InventoryId]

    for $shipment in $shipments
    let $shipmentStatus := $shipment//ShipmentStatus
    let $appointments := $Appointments[.//InventoryId eq shipment//InventoryId and .//VesselId eq $vessel//VesselId]

      for $appointment in $appointments
      let $appointmentType := $appointment//AppointmentType
      let $appointmentStatus := $appointment//AppointmentStatus
      
return (element object{$vesselId,$journeyId,$inventoryId,$inventoryType,$shipmentStatus,$appointmentType,$appointmentStatus})

return element result{
  for $type in fn:distinct-values($Appointments//AppointmentType)
  let $var := $results[.//appointmentType eq $type]
  return ( $type, element object{$var})
}
